G = {

	(1) Arithmetic: expr1 -> expr2 (+|-|*|/|%) expr3
	(2) Logical: expr1 -> expr2 (&& | ||) expr3
	(3) Comparison: expr1 -> expr2 (== | != | > | < | >= | <=) expr3
	(4) LitInt: expr -> INT_CONSTANT
	(5) LitDouble: expr -> REAL_CONSTANT
	(6) LitChar: expr -> CHAR_CONSTANT
	(7) StructAccess: expr1 -> expr2 ID
	(8) Var: expr -> ID
	(9) ArrayAccess: expr1 -> expr2 expr3
	(10) Cast: expr1 -> type expr2
	(11) Not: expr1 -> expr2
	(12) MinusUnary: expr1 -> expr2
	(13) FunctionInvocation: expr1 -> expr2 expr3*
	(14) Assignment: stmnt -> expr1 expr2
	(15) Print: stmnt -> expr
	(16) Input: stmnt -> expr
	(17) Return: stmnt -> expr
	(18) IfElse: stmnt1 -> expr stmnt2* stmnt3*
	(19) While: stmnt1 -> expr stmnt2*
	(20) FuncDefinition: funcDefinition -> ID type stmnt*

}

A = { expr.type } dominio: { Type }

R = {

	(1) expr1.type = expr2.type.arithmetic(expr3.type)
	(2) expr1.type = expr2.type.logical(expr3.type)
	(3) expr1.type = expr2.type.comparison(expr3.type)
	(4) expr.type = IntType.getInstance()
	(5) expr.type = DoubleType.getInstance()
	(6) expr.type = CharType.getInstance()
	(7) expr1.type = expr2.type.dot(ID)
	(8) expr.type = definition.getType() // Ya ha pasado el 'Identification Visitor'
	(9) expr1.type = expr2.type.squareBrackets(expr3.type)
	(10) expr1.type = expr2.type.canBeCastTo(type)
	(11) expr1.type = expr2.type.not()
	(12) expr1.type = expr2.type.minusUnary()
	(13) expr1.type = expr2.type.parenthesis(expr3*.stream().map(expr -> expr.type).toList())
	(14) expr1.type.mustBeEquals(expr2.type)
	(15) expr.type.mustBeBuiltInType()
	(16) expr.type.mustBeBuiltInType()
	(17) expr.type.mustBeEquals(stmnt.returnType)
	(18) expr.type.mustBeLogical()
	     stmnt2*.forEach(stmnt -> stmnt.returnType = stmnt1.returnType)
	     stmnt3*.forEach(stmnt -> stmnt.returnType = stmnt1.returnType)
	(19) expr.type.mustBeLogical()
	     stmnt2*.forEach(stmnt -> stmnt.returnType = stmnt1.returnType)
	(20) stmnt*.stream().forEach(stmnt -> stmnt.returnType = type.returnType)

}