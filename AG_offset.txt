G = {

    (1) FuncDefinition: funcDefinition -> type ID varDefinition* statement*
    (2) RecordType: type -> fields*
    (3) VarDefinition: varDefinition -> type ID
    (4) RecordField: field -> ID type
    (X) FunctionType: type1 -> type2 varDefinition*
    (X) Variable: expression -> ID

}

A = { field.offset } dominio: { int }

R = {

    (1) int paramBytesSum = 0;
        for (int i = varDefinition*.size() - 1; i >= 0; i--) {
            varDefinition varDef = varDefinition*.get(i);
            varDef.offset = 4 + paramBytesSum;
            paramBytesSum += varDef.type.numberOfBytes;
        }
    (2) int fieldBytesSum = 0;
        for (RecordField field : field*) {
            field.offset = fieldBytesSum;
            fieldBytesSum += field.type.numberOfBytes();
        }
    (3)

}